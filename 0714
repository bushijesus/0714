#include "stdafx.h"
#include <iostream>
#include <cstring>
using namespace std;

/*
 实现cat函数，此函数完成字符串拼接
 将参数str, 拼接到p所指向的存储空间，但要注意，p可能为空，或存储空间不够，如果p不为空时，p所指向的空间大小为strlen(p) + 1
 */
void cat(char *& p, const char *str)
{
	if (p == nullptr) {
		p = new char[strlen(str) + 1];
		strcpy_s(p, strlen(str) + 1, str);
	}
	else {
		char* temp = new char[strlen(p) + strlen(str) + 1];
		strcpy_s(temp, strlen(p) + 1, p);
		strcat_s(temp, strlen(p) + strlen(str) + 1, str);
		delete[] p;
		p = temp;
	}
}

int main() {
	char *p = nullptr;
	cat(p, "123");
	cout << p << endl; //输出123
	cat(p, "ABC");
	cout << p << endl; //输出123ABC
	cat(p, "789");
	cout << p << endl; //输出123ABC789
	delete[] p;
	return 0;
}

// 0714.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <iostream>
#include <string>
using namespace std;

// 类模板
template <class NameType, class AgeType = int>
class Person {
public:
	Person(NameType name, AgeType age) {
		this->Name = name;
		this->Age = age;
	}
	void showPerson() {
		cout << "name: " << this->Name << endl;
		cout << "age: " << this->Age << endl;
	}
	NameType Name;
	AgeType Age;
};

void test01() {
	Person<string, int> p1("Tom", 18);
	p1.showPerson();
}

void test02() {
	Person<string> p2("Jerry", 17);
	p2.showPerson();
}

class Person1 {
public:
	void showPerson1() {
		cout << "showPerson1" << endl;
	}
};

class Person2 {
public:
	void showPerson2() {
		cout << "showPerson2" << endl;
	}
};

template<class T>
class Myclass {
public:
	T obj;
	// 类模板中的成员函数，并不是一开始就创建的，而是在模板调用时生成
	void func1() {
		obj.showPerson1();
	}
	void func2() {
		obj.showPerson2();
	}

};

void test03() {
	Myclass<Person1> m;
	m.func1();
	//m.func2();
}
int main7()
{
	test03();
	return 0;
}

// 类模板对象做函数参数
template<class T1, class T2>
class Human {
public:
	Human(T1 name, T2 age) {
		this->Name = name;
		this->Age = age;
	}
	void showHuman() {
		cout << "姓名： " << this->Name << endl;
		cout << "年龄： " << this->Age << endl;
	}
	string Name;
	int Age;
};

// 1、指定传入类型
void printHuman1(Human<string, int> &h) {
	h.showHuman();
}
void test04() {
	Human<string, int> h1("zhangsan", 18);
	printHuman1(h1);
}

// 参数模板化
template<class T1, class T2>
void printHuman2(Human<T1, T2> &h) {
	h.showHuman();
	cout << "T1的类型：" << typeid(T1).name() << endl;
	cout << "T2的类型：" << typeid(T2).name() << endl;
}
void test05() {
	Human<string, int> h2("lisi", 22);
	printHuman2(h2);
}

// 整个类模板化
template<class T>
void printHuman3(T &h) {
	h.showHuman();
}
void test06() {
	Human<string, int> h3("wangmazi", 56);
	printHuman3(h3);
}
int main5() {
	test06();
	return 0;
}

#include "stdafx.h"
#include <iostream>
#include <algorithm>
using namespace std;

int my_swap(const void* a, const void* b) {
	return (*(int*)a - *(int*)b);
}
int * test(int n, int opt) {
	int * p = new int[n];
	cout << "请输入" << n << "个数据" << endl;
	for (int i = 0; i < n; ++i)
	{
		cin >> p[i];
	}
	qsort(p, n, 4, &my_swap);
	if (opt == 1) {
		return p;
	}
	else if (opt == 0) {
		for (int i = 0; i < n; ++i)
		{
			int tmp = p[i];
			p[i] = p[n - i - 1];
			p[n - i] = tmp;
		}
		return p;
	}
	else
	{
		return NULL;
	}
}
int main0() {
	int n = 0;
	int opt = -1;
	cout << "请输入数据个数" << endl;
	while (true) {
		cin >> n;
		if (n > 0)
		{
			break;
		}
		else
		{
			cout << "数据个数输入错误，请重新输入：" << endl;
			cin.clear();
			cin.ignore();
		}
	}
	cout << "你要选择的排序类型（0为降序，1为升序）" << endl;
	while (true) {
		cin >> opt;
		if (opt == 0 || opt == 1)
		{
			break;
		}
		else
		{
			cout << "排序选项输入错误，请重新输入：" << endl;
			cin.clear();
			cin.ignore();
		}
	}
	int *p = test(n, opt);
	for (int i = 0; i < n; ++i)
	{
		cout << p[i] << endl;
	}
	delete []p;
	return 0;
}
int main1() {
	char arr[50] = "";
	char * p = "";
	strcpy_s(p, 10, "hello");
	strcpy_s(arr, "hello");
	strcat_s(arr, "world");
	cout << arr << endl;
	return 0;
}
void Set(char*& p, const char* src)
{
	p = new char[100];
	strcpy_s(p, 100, src);
}

int main4()
{
	char* p = nullptr;
	Set(p, "hello world!");
	cout  << p << endl;
	delete []p;
	return 0;
}
